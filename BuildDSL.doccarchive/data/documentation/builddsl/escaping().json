{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Escaping"},{"kind":"text","text":"()"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"The "},{"code":"@Escaping","type":"codeVoice"},{"type":"text","text":" macro helps resolve compiler errors when working with closure"},{"type":"text","text":" "},{"type":"text","text":"properties that use type aliases or aren’t recognized as closures by the macro system."},{"type":"text","text":" "},{"type":"text","text":"It ensures the generated setter method properly marks the closure parameter as "},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Swift requires closure parameters to be marked as "},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":" when they’re stored"},{"type":"text","text":" "},{"type":"text","text":"in properties. The "},{"code":"Builder","type":"codeVoice"},{"type":"text","text":" macro automatically detects most closure types, but"},{"type":"text","text":" "},{"type":"text","text":"when using type aliases or complex closure types, manual annotation may be needed."}],"type":"paragraph"},{"level":2,"anchor":"When-to-Use","type":"heading","text":"When to Use"},{"inlineContent":[{"type":"text","text":"Use "},{"code":"@Escaping","type":"codeVoice"},{"type":"text","text":" when you encounter compiler errors about non-escaping closures"},{"type":"text","text":" "},{"type":"text","text":"being assigned to stored properties, particularly with:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Type aliases for closure types"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Complex closure signatures"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Generic closure types"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Usage","type":"heading","text":"Usage"},{"level":3,"anchor":"Problem-Case","type":"heading","text":"Problem Case"},{"inlineContent":[{"type":"text","text":"Without "},{"code":"@Escaping","type":"codeVoice"},{"type":"text","text":", this fails to compile:"}],"type":"paragraph"},{"code":["typealias CompletionHandler = (Result<String, Error>) -> Void","","@Builder","struct NetworkRequest {","    let url: String","    let completion: CompletionHandler  \/\/ Compiler error!","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Error","type":"text"}]},{"type":"text","text":": "},{"code":"Assigning non-escaping parameter 'value' to an @escaping closure","type":"codeVoice"}],"type":"paragraph"},{"level":3,"anchor":"Solution","type":"heading","text":"Solution"},{"inlineContent":[{"type":"text","text":"Apply "},{"code":"@Escaping","type":"codeVoice"},{"type":"text","text":" to fix the issue:"}],"type":"paragraph"},{"code":["typealias CompletionHandler = (Result<String, Error>) -> Void","","@Builder","struct NetworkRequest {","    let url: String","    ","    @Escaping","    let completion: CompletionHandler  \/\/ Now works correctly!","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Generated-Code","type":"heading","text":"Generated Code"},{"inlineContent":[{"type":"text","text":"The macro generates different setter signatures:"}],"type":"paragraph"},{"level":3,"anchor":"Without-Escaping-type-alias-causes-error","type":"heading","text":"Without @Escaping (type alias - causes error)"},{"code":["func completion(_ value: CompletionHandler) -> Builder {","    \/\/ Error: non-escaping parameter assigned to escaping closure","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"With-Escaping-correct","type":"heading","text":"With @Escaping (correct)"},{"code":["func completion(_ value: @escaping CompletionHandler) -> Builder {","    self.completion = value","    return self","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Automatic-Detection","type":"heading","text":"Automatic Detection"},{"inlineContent":[{"type":"text","text":"The macro automatically handles these closure types without "},{"code":"@Escaping","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["@Builder","struct AutoDetected {","    let simpleCallback: () -> Void              \/\/ ✓ Auto-detected","    let paramCallback: (String) -> Void        \/\/ ✓ Auto-detected  ","    let returningCallback: () -> String        \/\/ ✓ Auto-detected","    let complexCallback: (Int, String) -> Bool \/\/ ✓ Auto-detected","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Builder-Usage","type":"heading","text":"Builder Usage"},{"inlineContent":[{"text":"Use the generated builder normally:","type":"text"}],"type":"paragraph"},{"code":["let request = NetworkRequest.build { $0","    .url(\"https:\/\/api.example.com\/data\")","    .completion { result in","        switch result {","        case .success(let data):","            print(\"Success: \\(data)\")","        case .failure(let error):","            print(\"Error: \\(error)\")","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only use "},{"type":"codeVoice","code":"@Escaping"},{"type":"text","text":" when you encounter compiler errors. The macro"},{"type":"text","text":" "},{"type":"text","text":"system automatically handles most closure types correctly."}]}],"type":"aside","style":"note","name":"Note"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/builddsl.BuildDSL\/documentation\/BuildDSL"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/builddsl.BuildDSL\/documentation\/BuildDSL\/Escaping()"},"metadata":{"symbolKind":"macro","roleHeading":"Macro","externalID":"s:8BuildDSL8Escapingyycfm","modules":[{"name":"BuildDSL"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Escaping"},{"kind":"text","text":"()"}],"title":"Escaping()","role":"symbol"},"abstract":[{"type":"text","text":"Marks closure properties to use "},{"code":"@escaping","type":"codeVoice"},{"type":"text","text":" in the generated builder setter."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/builddsl\/escaping()"]}],"kind":"symbol","references":{"doc://builddsl.BuildDSL/documentation/BuildDSL":{"url":"\/documentation\/builddsl","abstract":[],"role":"collection","kind":"symbol","type":"topic","title":"BuildDSL","identifier":"doc:\/\/builddsl.BuildDSL\/documentation\/BuildDSL"},"doc://builddsl.BuildDSL/documentation/BuildDSL/Escaping()":{"kind":"symbol","identifier":"doc:\/\/builddsl.BuildDSL\/documentation\/BuildDSL\/Escaping()","type":"topic","role":"symbol","url":"\/documentation\/builddsl\/escaping()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Escaping","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Marks closure properties to use ","type":"text"},{"type":"codeVoice","code":"@escaping"},{"text":" in the generated builder setter.","type":"text"}],"title":"Escaping()"}}}